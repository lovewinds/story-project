// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ipc {

namespace {

const ::google::protobuf::Descriptor* IPCMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPCMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPCMessage_MessageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPCMessage_MessageItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IPCMessage_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ipc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ipc_2eproto() {
  protobuf_AddDesc_ipc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ipc.proto");
  GOOGLE_CHECK(file != NULL);
  IPCMessage_descriptor_ = file->message_type(0);
  static const int IPCMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, item_),
  };
  IPCMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IPCMessage_descriptor_,
      IPCMessage::default_instance_,
      IPCMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(IPCMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, _is_default_instance_));
  IPCMessage_MessageItem_descriptor_ = IPCMessage_descriptor_->nested_type(0);
  static const int IPCMessage_MessageItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage_MessageItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage_MessageItem, text_),
  };
  IPCMessage_MessageItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IPCMessage_MessageItem_descriptor_,
      IPCMessage_MessageItem::default_instance_,
      IPCMessage_MessageItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(IPCMessage_MessageItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage_MessageItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage_MessageItem, _is_default_instance_));
  IPCMessage_MessageType_descriptor_ = IPCMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ipc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IPCMessage_descriptor_, &IPCMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IPCMessage_MessageItem_descriptor_, &IPCMessage_MessageItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ipc_2eproto() {
  delete IPCMessage::default_instance_;
  delete IPCMessage_reflection_;
  delete IPCMessage_MessageItem::default_instance_;
  delete IPCMessage_MessageItem_reflection_;
}

void protobuf_AddDesc_ipc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ipc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tipc.proto\022\003ipc\"\337\001\n\nIPCMessage\022\013\n\003pid\030\001"
    " \001(\005\022)\n\004item\030\002 \003(\0132\033.ipc.IPCMessage.Mess"
    "ageItem\032F\n\013MessageItem\022)\n\004type\030\001 \001(\0162\033.i"
    "pc.IPCMessage.MessageType\022\014\n\004text\030\002 \001(\t\""
    "Q\n\013MessageType\022\021\n\rGET_SCENEINFO\020\000\022\021\n\rSET"
    "_SCENEINFO\020\001\022\r\n\tLOG_DEBUG\020\002\022\r\n\tLOG_ERROR"
    "\020\003b\006proto3", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipc.proto", &protobuf_RegisterTypes);
  IPCMessage::default_instance_ = new IPCMessage();
  IPCMessage_MessageItem::default_instance_ = new IPCMessage_MessageItem();
  IPCMessage::default_instance_->InitAsDefaultInstance();
  IPCMessage_MessageItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ipc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ipc_2eproto {
  StaticDescriptorInitializer_ipc_2eproto() {
    protobuf_AddDesc_ipc_2eproto();
  }
} static_descriptor_initializer_ipc_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* IPCMessage_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCMessage_MessageType_descriptor_;
}
bool IPCMessage_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IPCMessage_MessageType IPCMessage::GET_SCENEINFO;
const IPCMessage_MessageType IPCMessage::SET_SCENEINFO;
const IPCMessage_MessageType IPCMessage::LOG_DEBUG;
const IPCMessage_MessageType IPCMessage::LOG_ERROR;
const IPCMessage_MessageType IPCMessage::MessageType_MIN;
const IPCMessage_MessageType IPCMessage::MessageType_MAX;
const int IPCMessage::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPCMessage_MessageItem::kTypeFieldNumber;
const int IPCMessage_MessageItem::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPCMessage_MessageItem::IPCMessage_MessageItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.IPCMessage.MessageItem)
}

void IPCMessage_MessageItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IPCMessage_MessageItem::IPCMessage_MessageItem(const IPCMessage_MessageItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ipc.IPCMessage.MessageItem)
}

void IPCMessage_MessageItem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IPCMessage_MessageItem::~IPCMessage_MessageItem() {
  // @@protoc_insertion_point(destructor:ipc.IPCMessage.MessageItem)
  SharedDtor();
}

void IPCMessage_MessageItem::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IPCMessage_MessageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPCMessage_MessageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCMessage_MessageItem_descriptor_;
}

const IPCMessage_MessageItem& IPCMessage_MessageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

IPCMessage_MessageItem* IPCMessage_MessageItem::default_instance_ = NULL;

IPCMessage_MessageItem* IPCMessage_MessageItem::New(::google::protobuf::Arena* arena) const {
  IPCMessage_MessageItem* n = new IPCMessage_MessageItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPCMessage_MessageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.IPCMessage.MessageItem)
  type_ = 0;
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IPCMessage_MessageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ipc.IPCMessage.MessageItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.IPCMessage.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ipc::IPCMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ipc.IPCMessage.MessageItem.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.IPCMessage.MessageItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.IPCMessage.MessageItem)
  return false;
#undef DO_
}

void IPCMessage_MessageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.IPCMessage.MessageItem)
  // optional .ipc.IPCMessage.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ipc.IPCMessage.MessageItem.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:ipc.IPCMessage.MessageItem)
}

::google::protobuf::uint8* IPCMessage_MessageItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc.IPCMessage.MessageItem)
  // optional .ipc.IPCMessage.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ipc.IPCMessage.MessageItem.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ipc.IPCMessage.MessageItem)
  return target;
}

int IPCMessage_MessageItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.IPCMessage.MessageItem)
  int total_size = 0;

  // optional .ipc.IPCMessage.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPCMessage_MessageItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipc.IPCMessage.MessageItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IPCMessage_MessageItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IPCMessage_MessageItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipc.IPCMessage.MessageItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipc.IPCMessage.MessageItem)
    MergeFrom(*source);
  }
}

void IPCMessage_MessageItem::MergeFrom(const IPCMessage_MessageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.IPCMessage.MessageItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void IPCMessage_MessageItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipc.IPCMessage.MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCMessage_MessageItem::CopyFrom(const IPCMessage_MessageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.IPCMessage.MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCMessage_MessageItem::IsInitialized() const {

  return true;
}

void IPCMessage_MessageItem::Swap(IPCMessage_MessageItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPCMessage_MessageItem::InternalSwap(IPCMessage_MessageItem* other) {
  std::swap(type_, other->type_);
  text_.Swap(&other->text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPCMessage_MessageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPCMessage_MessageItem_descriptor_;
  metadata.reflection = IPCMessage_MessageItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPCMessage::kPidFieldNumber;
const int IPCMessage::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPCMessage::IPCMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.IPCMessage)
}

void IPCMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IPCMessage::IPCMessage(const IPCMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ipc.IPCMessage)
}

void IPCMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pid_ = 0;
}

IPCMessage::~IPCMessage() {
  // @@protoc_insertion_point(destructor:ipc.IPCMessage)
  SharedDtor();
}

void IPCMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IPCMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPCMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCMessage_descriptor_;
}

const IPCMessage& IPCMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

IPCMessage* IPCMessage::default_instance_ = NULL;

IPCMessage* IPCMessage::New(::google::protobuf::Arena* arena) const {
  IPCMessage* n = new IPCMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.IPCMessage)
  pid_ = 0;
  item_.Clear();
}

bool IPCMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ipc.IPCMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .ipc.IPCMessage.MessageItem item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_item;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.IPCMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.IPCMessage)
  return false;
#undef DO_
}

void IPCMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.IPCMessage)
  // optional int32 pid = 1;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // repeated .ipc.IPCMessage.MessageItem item = 2;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ipc.IPCMessage)
}

::google::protobuf::uint8* IPCMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc.IPCMessage)
  // optional int32 pid = 1;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // repeated .ipc.IPCMessage.MessageItem item = 2;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->item(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ipc.IPCMessage)
  return target;
}

int IPCMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.IPCMessage)
  int total_size = 0;

  // optional int32 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());
  }

  // repeated .ipc.IPCMessage.MessageItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPCMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipc.IPCMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IPCMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IPCMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipc.IPCMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipc.IPCMessage)
    MergeFrom(*source);
  }
}

void IPCMessage::MergeFrom(const IPCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.IPCMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  item_.MergeFrom(from.item_);
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
}

void IPCMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipc.IPCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCMessage::CopyFrom(const IPCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.IPCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCMessage::IsInitialized() const {

  return true;
}

void IPCMessage::Swap(IPCMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPCMessage::InternalSwap(IPCMessage* other) {
  std::swap(pid_, other->pid_);
  item_.UnsafeArenaSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPCMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPCMessage_descriptor_;
  metadata.reflection = IPCMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IPCMessage_MessageItem

// optional .ipc.IPCMessage.MessageType type = 1;
void IPCMessage_MessageItem::clear_type() {
  type_ = 0;
}
 ::ipc::IPCMessage_MessageType IPCMessage_MessageItem::type() const {
  // @@protoc_insertion_point(field_get:ipc.IPCMessage.MessageItem.type)
  return static_cast< ::ipc::IPCMessage_MessageType >(type_);
}
 void IPCMessage_MessageItem::set_type(::ipc::IPCMessage_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ipc.IPCMessage.MessageItem.type)
}

// optional string text = 2;
void IPCMessage_MessageItem::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IPCMessage_MessageItem::text() const {
  // @@protoc_insertion_point(field_get:ipc.IPCMessage.MessageItem.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IPCMessage_MessageItem::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.IPCMessage.MessageItem.text)
}
 void IPCMessage_MessageItem::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.IPCMessage.MessageItem.text)
}
 void IPCMessage_MessageItem::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.IPCMessage.MessageItem.text)
}
 ::std::string* IPCMessage_MessageItem::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:ipc.IPCMessage.MessageItem.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IPCMessage_MessageItem::release_text() {
  // @@protoc_insertion_point(field_release:ipc.IPCMessage.MessageItem.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IPCMessage_MessageItem::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ipc.IPCMessage.MessageItem.text)
}

// -------------------------------------------------------------------

// IPCMessage

// optional int32 pid = 1;
void IPCMessage::clear_pid() {
  pid_ = 0;
}
 ::google::protobuf::int32 IPCMessage::pid() const {
  // @@protoc_insertion_point(field_get:ipc.IPCMessage.pid)
  return pid_;
}
 void IPCMessage::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:ipc.IPCMessage.pid)
}

// repeated .ipc.IPCMessage.MessageItem item = 2;
int IPCMessage::item_size() const {
  return item_.size();
}
void IPCMessage::clear_item() {
  item_.Clear();
}
const ::ipc::IPCMessage_MessageItem& IPCMessage::item(int index) const {
  // @@protoc_insertion_point(field_get:ipc.IPCMessage.item)
  return item_.Get(index);
}
::ipc::IPCMessage_MessageItem* IPCMessage::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:ipc.IPCMessage.item)
  return item_.Mutable(index);
}
::ipc::IPCMessage_MessageItem* IPCMessage::add_item() {
  // @@protoc_insertion_point(field_add:ipc.IPCMessage.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::ipc::IPCMessage_MessageItem >*
IPCMessage::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:ipc.IPCMessage.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::ipc::IPCMessage_MessageItem >&
IPCMessage::item() const {
  // @@protoc_insertion_point(field_list:ipc.IPCMessage.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc

// @@protoc_insertion_point(global_scope)
